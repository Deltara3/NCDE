extract import "binary.spwn"

num   = @regex::new("^[0-9]*$")
alnum = @regex::new("^[0-9A-Z\\$%\\*\\+\\-\\./: ]*$")

encode = (data: @string, correct_lvl: @string = "L") {
    $.print("[INFO] | Encoding \"{}\", proceeding.".fmt(data))

    // Get mode
    let set_mode = null
    if num.match(data) == true {
        set_mode = "num"
    } else {
        if alnum.match(data) == true {
            set_mode = "alnum"
        } else {
            set_mode = "byte"
        }
    }

    $.print("[INFO] | Mode \"{}\" auto-chosen.".fmt(set_mode))

    // Correction level
    if correct_lvl == "L" {
        $.print("[WARN] | No correction level provided, defaulting to \"L\", proceeding.")
    }

    // Version table
    ver_table = {
        "1": {
            "L": {
                "num"   : 41,
                "alnum" : 25,
                "byte"  : 17,
                "cword" : 19,
                "ccwpb" : 7,
                "blkgo" : 1,
                "cdigo" : 19,
                "blkgt" : null,
                "cdigt" : null
            },
            "M": {
                "num"   : 34,
                "alnum" : 20,
                "byte"  : 17,
                "cword" : 16,
                "ccwpb" : 10,
                "blkgo" : 1,
                "cdigo" : 16,
                "blkgt" : null,
                "cdigt" : null
            },
            "Q": {
                "num"   : 27,
                "alnum" : 16,
                "byte"  : 11,
                "cword" : 13,
                "ccwpb" : 13,
                "blkgo" : 1,
                "cdigo" : 13,
                "blkgt" : null,
                "cdigt" : null
            },
            "H": {
                "num"   : 17,
                "alpha" : 10,
                "byte"  : 7,
                "cword" : 9,
                "ccwpb" : 17,
                "blkgo" : 1,
                "cdigo" : 9,
                "blkgt" : null,
                "cdigt" : null
            }
        },
        "2": {
            "L": {
                "num"   : 77,
                "alnum" : 47,
                "byte"  : 32,
                "cword" : 34,
                "ccwpb" : 10,
                "blkgo" : 1,
                "cdigo" : 34,
                "blkgt" : null,
                "cdigt" : null
            },
            "M": {
                "num"   : 63,
                "alnum" : 38,
                "byte"  : 26,
                "cword" : 28,
                "ccwpb" : 16,
                "blkgo" : 1,
                "cdigo" : 28,
                "blkgt" : null,
                "cdigt" : null
            },
            "Q": {
                "num"   : 48,
                "alnum" : 29,
                "byte"  : 20,
                "cword" : 22,
                "ccwpb" : 22,
                "blkgo" : 1,
                "cdigo" : 22,
                "blkgt" : null,
                "cdigt" : null
            },
            "H": {
                "num"   : 34,
                "alnum" : 20,
                "byte"  : 14,
                "cword" : 16,
                "ccwpb" : 28,
                "blkgo" : 1,
                "cdigo" : 16,
                "blkgt" : null,
                "cdigt" : null
            }
        }
    }

    // Character count length table
    char_count_len = {
        "1": {
            "num"  : 10,
            "alnum": 9,
            "byte" : 8
        },
        "10": {
            "num"  : 12,
            "alnum": 11,
            "byte" : 16
        },
        "27": {
            "num"  : 14,
            "alnum": 13,
            "byte" : 16
        }
    }

    // Mode indicator table
    mode_indicator = {
        "num"  : [0,0,0,1],
        "alnum": [0,0,1,0],
        "byte" : [0,1,0,0]
    }

    alnum_table = {
        "A": 10,
        "B": 11,
        "C": 12,
        "D": 13,
        "E": 14,
        "F": 15,
        "G": 16,
        "H": 17,
        "I": 18,
        "J": 19,
        "K": 20,
        "L": 21,
        "M": 22,
        "N": 23,
        "O": 24,
        "P": 25,
        "Q": 26,
        "R": 27,
        "S": 28,
        "T": 29,
        "U": 30,
        "V": 31,
        "W": 32,
        "X": 33,
        "Y": 34,
        "Z": 35,
        " ": 36,
        "$": 37,
        "%": 38,
        "*": 39,
        "+": 40,
        "-": 41,
        ".": 42,
        "/": 43,
        ":": 44
    }

    // Final QR code settings
    let set_qr = {
        "ver"       : null,
        "mode"      : null,
        "correction": null,
        "char_count": null,
        "reg_bits"  : null
    }
    // for i in 1..41 {
    // Set those final QR code settings
    for i in 1..3 {
        if data.length <= ver_table[i as @string][correct_lvl][set_mode] {
            set_qr["ver"]        = i
            set_qr["mode"]       = set_mode
            set_qr["correction"] = correct_lvl
            set_qr["req_bits"]   = ver_table[set_qr["ver"] as @string][set_qr["correction"]]["cword"] * 8

            if set_qr["ver"] < 10 {
                set_qr["char_count"] = char_count_len["1"][set_qr["mode"]]
            } else if set_qr["ver"] > 9 && set_qr["ver"] < 27 {
                set_qr["char_count"] = char_count_len["10"][set_qr["mode"]]
            } else if set_qr["ver"] > 26 && set_qr["ver"] < 41 {
                set_qr["char_count"] = char_count_len["27"][set_qr["mode"]]
            }
            break
        }
    }

    $.print("[INFO] | Generating a QR code of version \"{}\", using correction level \"{}\", proceeding.".fmt([set_qr["ver"], set_qr["correction"]]))

    // Get character count
    base = binary(data.length)
    let prefix = []

    for i in 0..set_qr["char_count"] - base.length {
        prefix.push(0)
    }
    let code = mode_indicator[set_qr["mode"]] + prefix + base
    let pairs = []

    // Seperate data
    for i in 0..2..data.length {
        if data.length % 2 != 0 && i == data.length - 1{
            pairs.push([data[i]])
        } else {
            pairs.push([data[i], data[i + 1]])
        }
    }

    let encoded = []

    // Encode data
    for i in 0..pairs.length {
        if pairs[i].length == 1 {
            en_base = binary(alnum_table[pairs[i][0]])
            for i in 0..6 - en_base.length {
                encoded.push(0)
            }
            encoded = encoded + en_base
        } else {
            en_base = binary(alnum_table[pairs[i][0]] * 45 + alnum_table[pairs[i][1]])
            for i in 0..11 - en_base.length {
                encoded.push(0)
            }
            encoded = encoded + en_base
        }
    }
    code = code + encoded

    // Terminator
    if "".join(code).length < set_qr["req_bits"] {
        if set_qr["req_bits"] - "".join(code).length > 4 {
            for i in 0..4 {
                code.push(0)
            }
        } else {
            for i in 0..set_qr["req_bits"] - "".join(code).length {
                code.push(0)
            }
        }
    }

    // Padding
    while "".join(code).length % 8 != 0 {
        code.push(0)
    }

    if "".join(code) != set_qr["req_bits"] {
        let sel_bit_pad = 1
        pad_bits = {
            "1": [1, 1, 1, 0, 1, 1, 0, 0],
            "2": [0, 0, 0, 1, 0, 0, 0, 1]
        }
        req_pad_bits = (set_qr["req_bits"] - "".join(code).length) / 8
        for i in 0..req_pad_bits {
            if sel_bit_pad == 1 {
                code = code + pad_bits["1"]
                sel_bit_pad = 2
            } else if sel_bit_pad == 2 {
                code = code + pad_bits["2"]
                sel_bit_pad = 1
            }
        }
    }

    // Split into codewords
    let codewords = []

    for i in 0..8.."".join(code).length {
        codewords.push("{}{}{}{}{}{}{}{}".fmt([code[i], code[i + 1], code[i + 2], code[i + 3], code[i + 4], code[i + 5], code[i + 6], code[i + 7]]))
    }
}

return {
    encode
}